createdAt: "2019-12-30T02:13:12.040Z"
updatedAt: "2020-01-20T10:14:55.182Z"
type: "MARKDOWN_NOTE"
folder: "3ee76ac761e39836b6e0"
title: "dotnet"
tags: []
content: '''
  # dotnet
  
  ```c#
  // reflection
  namespace Dan
  
  {
      [AttributeUsage(AttributeTargets.Class | AttributeTargets.Constructor |
          AttributeTargets.Field | AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
      public class DebugInfo : Attribute {
          public int BugNo { get; }
          public string Developer { get; }
          public string LastReview { get; }
          public string Message { get; set; }
  
          public DebugInfo(int bg, string dev, string d) {
              BugNo = bg;
              Developer = dev;
              LastReview = d;
          }
  
          public override string ToString() => $"[{BugNo}] {Developer}: '{Message}' {LastReview}";
      }
  
      [DebugInfo(45, "Zara", "12/8/2012", Message = "return type mismatch")]
      [DebugInfo(49, "Nuha", "10/10/2012", Message = "unused variable.")]
      public class Rectangle {
          public double Width { get; set; } = 0;
          public double Height { get; set; } = 0;
  
          [DebugInfo(55, "Zara", "19/10/2012", Message = "return type mismatch.")]
          public double Area { get { return Width * Height; } }
  
          [DebugInfo(67, "Zara", "19/10/2012")]
          public override string ToString() => $"{Width}x{Height}";
      }
  
      class Program {
          static void Main(string[] args) {
              foreach (var attr in typeof(Rectangle).GetCustomAttributes(false)) {
                  var dbi = attr as DebugInfo;
                  if (dbi != null) Console.WriteLine(dbi);
              }
  
              foreach (var m in typeof(Rectangle).GetMethods())
                  foreach (var attr in m.GetCustomAttributes(true))
                      Console.WriteLine(attr);
  
              foreach (var m in typeof(Rectangle).GetMembers())
                  foreach (var attr in m.GetCustomAttributes(false))
                      Console.WriteLine(attr);
          }
      }
  
  }
  
  
  
  // inline
  using System.Runtime.CompilerServices;
  
  [MethodImpl(MethodImplOptions.AggressiveInlining)]
  void InlineFunc(){}
  
  // readonly只能在构造函数中设定，之后不可改变
  public readonly int Value;
  public int Value { get; }
  
  // call constructor
  public Point(): this(0, 0) {}
  ```
  
  operator override
  ```c#
  public struct Point{
    public int X { get; set; }
    public int Y { get; set; }
  
    public Point(int x = 0, int y = 0){
        X = x;
        Y = y;
    }
    public static Point operator -(Point one, Point other) => new Point(one.X - other.X, one.Y - other.Y);
    public static Point operator -(Point one) => new Point(-one.X, -one.Y);
    public static Point operator +(Point one, Point other) => new Point(one.X + other.X, one.Y + other.Y);
    public static Point operator *(Point point, int s) => new Point(point.X * s, point.Y * s);
  
    public static Point Dot(Point one, Point other) => new Point(one.X * other.X, one.Y * other.Y);
    public static int Cross(Point one, Point other) => one.X * other.Y - one.Y * other.X;
  
    override public string ToString() => $"({X}, {Y})";
  }
  
  ```
  
  IO
  ```c#
  using System.IO;
  using System.IO.IsolateStorage;
  
  const string FILE_NAME = "testfile";
  
  var isoFile = IsolatedStorageFile.GetUserStoreForDomain();
  if(isoFile.FileExists(FILE_NAME)){
    Console.WriteLine("file exists.");
    
    using(var isoStream = new IsolatedStorageFileStream(FILE_NAME, FileMode.Open)){
      using(var reader = new StreamReader(isoStream)){
        var line = reader.Readline();
        while(line!= null){
          Console.WriteLine(line);
          line = reader.Readline();
        }
      }
    }
  }else{
    using(var isoStream = new IsolatedStorageFileStream(FILE_NAME, FileMode.Create)){
      using (var writer = new StreamWriter(isoStream)){
          writer.WriteLine("this is a line.\\nanother line.");
          Console.WriteLine("file write.");
      }
    }
  }
  
  
  ```
'''
linesHighlighted: []
isStarred: false
isTrashed: false

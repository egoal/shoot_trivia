createdAt: "2019-02-01T02:17:31.533Z"
updatedAt: "2019-02-01T02:48:27.120Z"
type: "MARKDOWN_NOTE"
folder: "742b290c4e679bed3513"
title: "algorithm"
tags: []
content: '''
  # algorithm 
  
  `#include <algorithm>`
  ```cpp
  transform(a.begin(), a.end(), std::back_inserter(b), [](int a){ return a*2; });
  transform(a.begin(), a.end(), b.begin(), c.begin(), [](int a, int b){ return a*b; });
  
  // 临近查找，寻找满足条件的相邻元素，找到就返回第一个的迭代器
  adjacent_find(vec.begin(), vec.end()); // 默认为 operator ==
  adjacent_find(vec.begin(), vec.end(), [](int a, int b){ return a+b==100; });
  
  all_of(vec.begin(), vec.end(), [](int a){ return a>=0; });
  any_of
  none_of
  
  copy
  copy_if(vec.begin(), vec.end(), std::back_inserter(vecB))
  copy_backward
  copy_n
  
  count
  count_if
  
  equal(a.begin(), a.end(), b.begin(), [](int a, int b){ return a==b; });
  equal_range // 返回满足条件的迭代器pair，默认为 operator ==
  
  fill(a.begin(), a.end(), 1)
  fill_n
  
  find
  find_end
  find_first_of
  find_if
  find_if_not
  find_end(first1, last1, first2, last2); // 寻找段，接受关系
  
  for_each 
  
  generate(v.begin(), v.end(), rand); // 多次调用产生器
  generate_n 
  
  includes 段1是否包含了段2，两段均已排序
  
  max_element
  min_element
  minmax_element
  
  merge // 合并已经排序的两个区间
  
  mismatch // 返回两区间第一个不匹配的项
  
  random_shuffle
  shuffle
  ```
  
  `#include <numeric>`
  ```cpp
  iota(a.begin(), a.end(), 0); // 递增填充，[0, 1, 2, ...]
  
  accumulate(a.begin(), a.end(), 0, [](double sum, A val){ return sum+ val.size; });
  
  inner_product(f1, l1, f2, v, op1, op2);
    while(f1!=l1){
      v = op1(v, op2(*f1, *f2));
      ++f1, ++f2;
    }
    // 默认op1: operator+, op2: operator*
    
  partial_sum(f1, l1, f2, op); // 累计结果到f2
  ```
  
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
